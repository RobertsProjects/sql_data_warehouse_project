-- Create gold dimension virtual tables as views

CREATE VIEW gold.dim_customers AS
SELECT 
	ROW_NUMBER() OVER (ORDER BY cst_id) AS customer_key,
	ci.cst_id AS customer_id,
	ci.cst_key AS customer_number,
	ci.cst_firstname AS first_name,
	ci.cst_lastname AS last_name,
	la.cntry AS country,
	ci.cst_marital_status AS marital_status,
	CASE WHEN ci.cst_gndr != 'n/a' THEN ci.cst_gndr
	ELSE COALESCE(ca.gen, 'n/a')
END AS gender,
	ca.bdate AS birthdate,
	ci.cst_create_date AS create_date
FROM silver.crm_cust_info ci
LEFT JOIN silver.erp_cust_az12 ca
ON ci.cst_key = ca.cid
LEFT JOIN silver.erp_loc_a101 la
ON ci.cst_key = la.cid;

SELECT * FROM gold.dim_customers;


CREATE VIEW gold.dim_products AS
SELECT
	ROW_NUMBER() OVER (ORDER BY prd_start_dt, prd_key) AS product_key,
	pn.prd_id AS product_id,
	pn.prd_key AS product_number,
	pn.prd_nm AS product_name,
	pn.cat_id AS category_id,
	pc.cat AS category,
	pc.subcat AS subcategory,
	pc.maintenance,
	pn.prd_cost AS cost,
	pn.prd_line AS product_line,
	pn.prd_start_dt AS start_date
FROM silver.crm_prd_info pn
LEFT JOIN silver.erp_px_cat_g1v2 pc
ON pn.cat_id = pc.id
WHERE pn.prd_end_dt IS NULL;

Select * from gold.dim_products;


-- Create gold facts virtual table as view

CREATE VIEW gold.fact_sales AS
SELECT 
	sd.sls_ord_num AS order_number,
	pr.product_key,
	cu.customer_key,
	sd.sls_order_dt AS order_date,
	sd.sls_ship_dt AS shipping_date,
	sd.sls_due_dt AS due_date,
	sd.sls_sales AS sales_amount,
	sd.sls_quantity AS quantity,
	sd.sls_price AS price
FROM silver.crm_sales_details sd
LEFT JOIN gold.dim_products pr
ON sd.sls_prd_key = pr.product_number
LEFT JOIN gold.dim_customers cu
ON sd.sls_cust_id = cu.customer_id;


-- Test gold views

SELECT * FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
LEFT JOIN gold.dim_products p
ON f.product_key = p.product_key;



-- Exploratory Data Analysis:

-- Analyze Schemas

SELECT * FROM INFORMATION_SCHEMA.TABLES;
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers';

SELECT DISTINCT country FROM gold.dim_customers;
SELECT DISTINCT category, subcategory, product_name FROM gold.dim_products;

-- Find date ranges
SELECT 
MIN(order_date) first_order_date,
MAX(order_date) last_order_date,
DATEDIFF(month, MIN(order_date), MAX(order_date)) AS order_range_months
FROM gold.fact_sales;

-- Find customer ages
SELECT 
MIN(birthdate) oldest_birthdate,
MAX(birthdate) youngest_birthdate,
DATEDIFF(year, MIN(birthdate), GETDATE()) AS oldest_age,
DATEDIFF(year, MAX(birthdate), GETDATE()) AS youngest_age
FROM gold.dim_customers;

-- Find total sales
SELECT SUM(sales_amount) AS total_sales
FROM gold.fact_sales;

-- Find items sold
SELECT SUM(quantity) AS total_quantity
FROM gold.fact_sales;

-- find the average selling price
SELECT AVG(price) AS average_price
FROM gold.fact_sales;

-- find total number of orders
SELECT COUNT(order_number) AS total_orders FROM gold.fact_sales;
SELECT COUNT(DISTINCT order_number) AS total_orders FROM gold.fact_sales;

-- find total products
SELECT COUNT(product_key) AS total_products FROM gold.fact_sales;

-- find total number of customers and their orders
SELECT COUNT(customer_key) AS number_customers FROM gold.dim_customers;
SELECT COUNT(DISTINCT customer_key) AS number_customers FROM gold.fact_sales;

-- find metrics in one query 
SELECT 'Total Sales' as measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity' , SUM(quantity) FROM gold.fact_sales
UNION ALL
SELECT 'Average Price' , AVG(price) FROM gold.fact_sales
UNION ALL
SELECT 'Total Nr. Orders' , COUNT(DISTINCT order_number) FROM gold.fact_sales
UNION ALL
SELECT 'Total Nr. Products' , COUNT(product_key) FROM gold.fact_sales
UNION ALL
SELECT 'Total Nr. Customers' , COUNT(customer_key) FROM gold.fact_sales;

-- find total customers by countries
SELECT country, COUNT(customer_id) AS customers
FROM gold.dim_customers
GROUP BY country
ORDER BY customers DESC;

-- find customers by gender
SELECT gender, COUNT(customer_id) AS customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY customers DESC;

-- find total product by category
SELECT category, COUNT(product_id) AS products
FROM gold.dim_products
GROUP BY category
ORDER BY products DESC;

-- find the average costs in SELECT category, COUNT(product_id) AS products
SELECT category, AVG(cost) AS Average_cost
FROM gold.dim_products
GROUP BY category
ORDER BY Average_cost DESC;

-- fint the total revenue generated for each category
SELECT category, SUM(sales_amount) AS total_revenue
FROM gold.dim_products p
JOIN  gold.fact_sales s
ON p.product_key = s.product_key
GROUP BY category
ORDER BY total_revenue DESC;

-- find the total revenue generate by each customers
SELECT customer_number, first_name, last_name, SUM(sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN  gold.dim_customers s
ON f.customer_key = s.customer_key
GROUP BY customer_number, first_name, last_name
ORDER BY total_revenue DESC;

-- find the distribution of items sold across countries
SELECT country, SUM(quantity) AS total_sold_items
FROM gold.fact_sales f
LEFT JOIN  gold.dim_customers s
ON f.customer_key = s.customer_key
GROUP BY country
ORDER BY total_sold_items DESC;

-- top 5 products generating the highest revenue
SELECT TOP 5 product_name, SUM(sales_amount) AS total_revenue
FROM gold.dim_products p
JOIN gold.fact_sales f
ON p.product_key = f.product_key
GROUP BY product_name
ORDER BY total_revenue DESC;

-- use windows functions
SELECT * FROM (
SELECT product_name, SUM(sales_amount) AS total_revenue,
ROW_NUMBER() OVER (ORDER BY SUM(sales_amount) DESC) AS rank_product
FROM gold.dim_products p
JOIN gold.fact_sales f
ON p.product_key = f.product_key
GROUP BY product_name)t
WHERE rank_product <= 5;


-- find the 5 word-performing products in terms of sales
SELECT TOP 5 product_name, SUM(sales_amount) AS total_revenue
FROM gold.dim_products p
JOIN gold.fact_sales f
ON p.product_key = f.product_key
GROUP BY product_name
ORDER BY total_revenue ASC;

-- find the top 10 customers who have generated the highest revenue

SELECT * FROM (
SELECT first_name, last_name, SUM(sales_amount) AS sales_revenue,
ROW_NUMBER() OVER (ORDER BY SUM(sales_amount) DESC) AS rank_sales
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY first_name, last_name)t
WHERE rank_sales <= 10;


SELECT TOP 10 first_name, last_name, SUM(sales_amount) AS sales_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY first_name, last_name
ORDER BY sales_revenue DESC;


-- find the customers with the fewest orders placed
SELECT first_name, last_name, COUNT(order_number) AS sales_revenue
FROM gold.fact_sales f
JOIN gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY first_name, last_name
ORDER BY sales_revenue ASC;
